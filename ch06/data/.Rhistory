theta_2 = 1-theta_1
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*theta_2))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*theta_2[i]))
P_1 <- T_1*theta_1[i]
P_2 <- T_2*theta_2[i]
theta_1[i+1] <- var(P_1)
theta_2[i+1] = 1-theta_1[i+1]
}
theta_1[i]
P_1
theta_1 = 0.5
theta_2 = 1-theta_1
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*theta_2))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*theta_2[i]))
P_1 <- T_1*theta_1[i]
P_2 <- T_2*theta_2[i]
theta_1[i+1] <- var(P_1)
theta_2[i+1] = 1-theta_1[i+1]
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.5
theta_2 = 1-theta_1
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*theta_2))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*theta_2[i]))
P_1 <- T_1*theta_1[i]
P_2 <- T_2*theta_2[i]
theta_1[i+1] <- var(P_1)
print(theta_1[i+1])
theta_2[i+1] = 1-theta_1[i+1]
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.5
theta_2 = 1-theta_1
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*theta_2))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*theta_2[i]))
P_1 <- T_1*theta_1[i]
P_2 <- T_2*theta_2[i]
theta_1[i+1] <- var(P_1*W)
print(theta_1[i+1])
theta_2[i+1] = 1-theta_1[i+1]
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.5
theta_2 = 1-theta_1
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*theta_2))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*theta_2[i]))
P_1 <- T_1*theta_1[i]
P_2 <- T_2*theta_2[i]
theta_1[i+1] <- sum( P_1 * x) / sum(P_1)
print(theta_1[i+1])
theta_2[i+1] = 1-theta_1[i+1]
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.5
theta_2 = 1-theta_1
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*theta_2))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*theta_2[i]))
P_1 <- T_1*theta_1[i]
P_2 <- T_2*theta_2[i]
theta_1[i+1] <- mean(P_1)
print(theta_1[i+1])
theta_2[i+1] = 1-theta_1[i+1]
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.5
theta_2 = 1-theta_1
set.seed(218319)
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*theta_2))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*theta_2[i]))
P_1 <- T_1*theta_1[i]
P_2 <- T_2*theta_2[i]
theta_1[i+1] <- mean(P_1)
print(theta_1[i+1])
theta_2[i+1] <- mean(P_2)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.5
theta_2 = 1-theta_1
set.seed(218319)
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*theta_2))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*theta_2[i]))
P_1 <- T_1*theta_1[i]
P_2 <- T_2*theta_2[i]
theta_1[i+1] <- mean(P_1)
print(theta_1[i+1])
theta_2[i+1] <- 1-mean(P_1)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.5
theta_2 = 1-theta_1
set.seed(218319)
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*(1-theta_1)))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*1-theta_1[i]))
P_1 <- T_1/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
print(theta_1[i+1])
theta_2[i+1] <- 1-mean(P_1)
}
theta_1 = 0.5
theta_2 = 1-theta_1
set.seed(218319)
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*(1-theta_1)))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*1-theta_1[i]))
P_1 <- T_1/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- 1-mean(P_1)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.3
theta_2 = 1-theta_1
set.seed(218319)
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*(1-theta_1)))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*1-theta_1[i]))
P_1 <- T_1/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- 1-mean(P_1)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.90
theta_2 = 1-theta_1
set.seed(218319)
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*(1-theta_1)))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*1-theta_1[i]))
P_1 <- T_1/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- 1-mean(P_1)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.90
theta_2 = 1-theta_1
set.seed(218319)
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*(1-theta_1)))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*1-theta_1[i]))
P_1 <- T_1/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- 1-mean(P_1)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.50
theta_2 = 1-theta_1
set.seed(218319)
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*(1-theta_1)))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*1-theta_1[i]))
P_1 <- T_1/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- 1-mean(P_1)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.50
theta_2 = 1-theta_1
set.seed(218319)
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*(1-theta_1)))
for( i in 1:20) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*1-theta_1[i]))
P_1 <- T_1/(T_1+T_2)
P_2 <- T_2/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- mean(P_2)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.50
theta_2 = 1-theta_1
set.seed(218319)
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*(1-theta_1)))
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*1-theta_1[i]))
P_1 <- T_1/(T_1+T_2)
P_2 <- T_2/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- mean(P_2)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.50
theta_2 = 1-theta_1
set.seed(218319)
W = rgamma(1e3, 0.5, 1/(2*theta_1))+rgamma(1e3, 0.5, 1/(2*(1-theta_1)))
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*1-theta_1[i]))
P_1 <- T_1/(T_1+T_2)
P_2 <- T_2/(T_1+T_2)
theta_1[i+1] <- sum(P_1*W)/sum(P_1)
theta_2[i+1] <- sum(P_2*W)/sum(P_2)
}
data.frame(theta_1, theta_2)[-1,]
?rchisq
theta_1 = 0.50
theta_2 = 1-theta_1
set.seed(218319)
W = theta_1*rchisq(1e3,1)+theta_2*rchisq(1e3,1)
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W, 0.5, 1/(2*theta_1[i]))
T_2 <- dgamma(W, 0.5, 1/(2*1-theta_1[i]))
P_1 <- T_1/(T_1+T_2)
P_2 <- T_2/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- mean(P_2)
}
data.frame(theta_1, theta_2)[-1,]
dchisq()
?dchisq()
theta_1 = 0.50
theta_2 = 1-theta_1
set.seed(218319)
W = theta_1*rchisq(1e3,1)+theta_2*rchisq(1e3,1)
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- theta_1*rchisq(W,1)
T_2 <- theta_2*rchisq(W,1)
P_1 <- T_1/(T_1+T_2)
P_2 <- T_2/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- mean(P_2)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.3
theta_2 = 1-theta_1
set.seed(218319)
W = theta_1*rchisq(1e3,1)+theta_2*rchisq(1e3,1)
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- theta_1*rchisq(W,1)
T_2 <- theta_2*rchisq(W,1)
P_1 <- T_1/(T_1+T_2)
P_2 <- T_2/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- mean(P_2)
}
data.frame(theta_1, theta_2)[-1,]
warnings()
theta_1 = 0.3
theta_2 = 1-theta_1
set.seed(218319)
W = theta_1*rchisq(1e3,1)+theta_2*rchisq(1e3,1)
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- theta_1*dchisq(W,1)
T_2 <- theta_2*dchisq(W,1)
P_1 <- T_1/(T_1+T_2)
P_2 <- T_2/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- mean(P_2)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.3
theta_2 = 1-theta_1
set.seed(218319)
W = theta_1*rchisq(1e3,1)+theta_2*rchisq(1e3,1)
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W,0.5, 1/(2*theta_1))
T_2 <- dgamma(W,0.5, 1/(2*theta_2))
P_1 <- T_1/(T_1+T_2)
P_2 <- T_2/(T_1+T_2)
theta_1[i+1] <- mean(P_1)
theta_2[i+1] <- mean(P_2)
}
data.frame(theta_1, theta_2)[-1,]
T_1
mean(T_1)
mean(T_2)
theta_1 = 0.5
theta_2 = 1-theta_1
W = c()
for(i in 1:1e3){
if(runif(1)< theta_1){
W[i] = theta_1*rchisq(1e3,1)
} else {
W[i] = theta_2*rchisq(1e3,1)
}
}
warnings()
theta_1 = 0.5
theta_2 = 1-theta_1
W = c()
for(i in 1:1e3){
if(runif(1)< theta_1){
W[i] = theta_1*rchisq(1,1)
} else {
W[i] = theta_2*rchisq(1,1)
}
}
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W,0.5, 1/(2*theta_1))
T_2 <- dgamma(W,0.5, 1/(2*theta_2))
P_1 <- T_1 / (T_1 + T_2)
P_2 <- T_2 / (T_1 + T_2)
theta_1[i+1] <-  sum( P_1 * W) / sum(P_1)
theta_2[i+1] <- sum( P_2 * W) / sum(P_2)
}
data.frame(theta_1, theta_2)[-1,]
theta_1 = 0.3
theta_2 = 1-theta_1
W = c()
for(i in 1:1e3){
if(runif(1)< theta_1){
W[i] = theta_1*rchisq(1,1)
} else {
W[i] = theta_2*rchisq(1,1)
}
}
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- dgamma(W,0.5, 1/(2*theta_1))
T_2 <- dgamma(W,0.5, 1/(2*theta_2))
P_1 <- T_1 / (T_1 + T_2)
P_2 <- T_2 / (T_1 + T_2)
theta_1[i+1] <-  sum( P_1 * W) / sum(P_1)
theta_2[i+1] <- sum( P_2 * W) / sum(P_2)
}
data.frame(theta_1, theta_2)[-1,]
?rbinom
rbinom(1,1,0.5)
rbinom(1000000,1,0.5)
x[x==0] = -1
x = rbinom(1000000,1,0.5)
x[x==0] = -1
x = rbinom(1e6,1,0.5)
x[x==0] = -1
mean(x)
sd(x)
sqrt(var(x)/1e6)
x = rbinom(1e6,1e6,0.5)
x = rbinom(1,1e6,0.5)
setwd("Documents/Georgetown/Data-Visualization-PPOL-646-Fall-2016/ch06/data/")
crime <- read.csv('crimeRatesByState2005.csv', sep=",", header=TRUE)
crime2 <- crime[crime$state != "District of Columbia",]
crime2 <- crime2[crime2$state != "United States",]
plot(crime$murder, crime$burglary)
plot(crime2$murder, crime2$burglary)
plot(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200))
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200))
# Scatterplot matrix
plot(crime2[,2:9])
# Scatterplot matrix with loess
pairs(crime2[,2:9], panel=panel.smooth)
# Stem and leaf
birth <- read.csv("birth-rate.csv")
stem(birth$X2008)
# Histogram
hist(birth$X2008)
hist(birth$X2008, breaks=5)
hist(birth$X2008, breaks=20)
# Histogram matrix
library(lattice)
birth_yearly <- read.csv("birth-rate-yearly.csv")
histogram(~ rate | year, data=birth_yearly, layout=c(10,5))
birth_yearly.new <- birth_yearly[birth_yearly$rate < 132,]
birth_yearly.new$year <- as.character(birth_yearly.new$year)
h <- histogram(~ rate | year, data=birth_yearly.new, layout=c(10,5))
update(h, index.cond=list(c(41:50, 31:40, 21:30, 11:20, 1:10)))
# Density plot
birth2008 <- birth$X2008[!is.na(birth$X2008)]
d2008 <- density(birth2008)
plot(d2008)
# Filled density plot
plot(d2008, type="n")
polygon(d2008, col="#821122", border="#cccccc")
# Storing data
d2008frame <- data.frame(d2008$x, d2008$y)
write.table(d2008frame, "testing.txt", sep="\t")
write.table(d2008frame, "testing.txt", sep="\t", row.names=FALSE)
# Both
library(lattice)
histogram(birth$X2008, breaks=10)
lines(d2008)
plot(crime$murder, crime$burglary)
plot(crime2$murder, crime2$burglary)
plot(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200))
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200))
library("ggplot2")
qplot(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200))
plot(crime2[,2:9])
qplot(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200))
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200))
plot(crime2[,2:9])
pairs(crime2[,2:9], panel=panel.smooth)
pairs(crime2[,2:9], panel=panel.smooth, col = "blue")
pairs(crime2[,2:9], panel=panel.smooth, col.smooth	 = "blue")
pairs(crime2[,2:9], panel=panel.smooth, pch = 2, col.smooth	 = "blue")
pairs(crime2[,2:9], panel=panel.smooth, pch = 20, col.smooth	 = "blue")
pairs(crime2[,2:9], panel=panel.smooth, pch = 20,col = "grey", col.smooth	= "blue")
pairs(crime2[,2:9], panel=panel.smooth, pch = 20,col = "grey", col.smooth	= "blue", border = "grey")
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200))
?scatter.smooth
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200))
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200), col = "blue11")
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200), col = "blue")
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200), col = "#0000ff", pch = 20)
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200), col = "#0000ff11", pch = 20)
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200), col = "#0000ff44", pch = 20)
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200), col = "#0000ff77", pch = 20)
qplot(crime2$murder, crime2$burglary)
p = qplot(crime2$murder, crime2$burglary)
(p1 <- p + geom_smooth(method = "loess", size = 1.5))
(p1 <- p + geom_smooth(method = "loess", size = 1.5))
?qplot
p = qplot(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200))
(p1 <- p + geom_smooth(method = "loess"))
scatter.smooth(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200), col = "#0000ff77", pch = 20)
p = qplot(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200), col = "#0000ff77")
(p1 <- p + geom_smooth(method = "loess"))
p = qplot(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200), col = "blue")
(p1 <- p + geom_smooth(method = "loess"))
p = qplot(crime2$murder, crime2$burglary, xlim=c(0,10), ylim=c(0, 1200), col = "red")
(p1 <- p + geom_smooth(method = "loess"))
plot(crime2[,2:9])
# Scatterplot matrix with loess
pairs(crime2[,2:9], panel=panel.smooth, pch = 20,col = "grey", col.smooth	= "blue")
# Stem and leaf
birth <- read.csv("birth-rate.csv")
stem(birth$X2008)
# Histogram
hist(birth$X2008)
hist(birth$X2008, breaks=5)
hist(birth$X2008, breaks=20)
# Histogram matrix
library(lattice)
birth_yearly <- read.csv("birth-rate-yearly.csv")
histogram(~ rate | year, data=birth_yearly, layout=c(10,5))
birth_yearly.new <- birth_yearly[birth_yearly$rate < 132,]
birth_yearly.new$year <- as.character(birth_yearly.new$year)
h <- histogram(~ rate | year, data=birth_yearly.new, layout=c(10,5))
update(h, index.cond=list(c(41:50, 31:40, 21:30, 11:20, 1:10)))
birth2008 <- birth$X2008[!is.na(birth$X2008)]
d2008 <- density(birth2008)
plot(d2008)
plot(d2008, type="n")
polygon(d2008, col="#821122", border="#cccccc")
U.S._Chronic_Disease_Indicators__CDI_ <- read.csv("~/Downloads/U.S._Chronic_Disease_Indicators__CDI_.csv")
Readmissions_and_Deaths_._Hospital <- read.csv("~/Downloads/Readmissions_and_Deaths_-_Hospital.csv")
Medicare_Hospital_Spending_by_Claim <- read.csv("~/Downloads/Medicare_Hospital_Spending_by_Claim.csv")
View(Medicare_Hospital_Spending_by_Claim)
View(Medicare_Hospital_Spending_by_Claim)
unique(Medicare_Hospital_Spending_by_Claim$Claim.Type)
names(Medicare_Hospital_Spending_by_Claim)
View(Medicare_Hospital_Spending_by_Claim)
View(U.S._Chronic_Disease_Indicators__CDI_)
View(Readmissions_and_Deaths_._Hospital)
