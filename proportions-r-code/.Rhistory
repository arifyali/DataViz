Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
legend("center", legend = c("Average Rate of Overall readmission"), fill = "grey80", bty = "n", cex=0.75)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="Average Rate of Overall readmission")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
# legend("center", legend = c("Average Rate of Overall readmission"), fill = "grey80", bty = "n", cex=0.75)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
library("sqldf")
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="Average Rate of Overall readmission", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
# legend("center", legend = c("Average Rate of Overall readmission"), fill = "grey80", bty = "n", cex=0.75)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
U.S._Chronic_Disease_Indicators__CDI_ <- read.csv("~/Downloads/U.S._Chronic_Disease_Indicators__CDI_.csv")
Readmissions_and_Deaths_._Hospital <- read.csv("~/Downloads/Readmissions_and_Deaths_-_Hospital.csv")
Medicare_Hospital_Spending_by_Claim <- read.csv("~/Downloads/Medicare_Hospital_Spending_by_Claim.csv")
### First Plot
library("sqldf")
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="Average Rate of Overall readmission", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("center", legend = c("Average Rate of Overall readmission"), fill = "grey80", bty = "n", cex=1)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("middle", legend = c("Average Rate of Overall readmission"), fill = "grey80", bty = "n", cex=1)
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("right", legend = c("Average Rate of Overall readmission"), fill = "grey80", bty = "n", cex=1)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("right", legend = c("Average Rate of Overall readmission"), fill = "grey80", bty = "n", cex=0.75)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("right", legend = c("Rate of Overall readmission"), fill = "grey80", bty = "n", cex=0.75)
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("right", legend = c("Rate of Overall readmission"), bty = "n", cex=0.75)
U.S._Chronic_Disease_Indicators__CDI_ <- read.csv("~/Downloads/U.S._Chronic_Disease_Indicators__CDI_.csv")
Readmissions_and_Deaths_._Hospital <- read.csv("~/Downloads/Readmissions_and_Deaths_-_Hospital.csv")
Medicare_Hospital_Spending_by_Claim <- read.csv("~/Downloads/Medicare_Hospital_Spending_by_Claim.csv")
### First Plot
library("sqldf")
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000FF"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("right", legend = c("Rate of Overall readmission"), bty = "n", cex=0.75)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
library("sqldf")
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000FF"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("right", legend = c("Rate of Overall readmission"), bty = "n", cex=1)
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000FF"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("right", legend = c("Rate of Overall readmission"), bty = "n", cex=0.75)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "after discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000FF"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("right", legend = c("Rate of Overall readmission"), bty = "n", cex=0.75)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission for ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub("Rate of readmission after ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = i,ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000FF"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("right", legend = c("Rate of Overall readmission"), bty = "n", cex=0.75)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
?toupper
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "discharge from hospital (hospital-wide)",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = toupper(i),ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000FF"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("right", legend = c("Rate of Overall readmission"), bty = "n", cex=0.75)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
Readmission_types
Readmissions = Readmissions_and_Deaths_._Hospital[grepl("READM", Readmissions_and_Deaths_._Hospital$Measure.ID), ]
names(Readmissions) = gsub("\\.","_", names(Readmissions))
Readmissions_by_state = sqldf("SELECT AVG(Score) AS average_score, State, Measure_Name AS readmission_type FROM Readmissions
GROUP BY State, Measure_Name;")
Readmissions_by_state = Readmissions_by_state[order(Readmissions_by_state$average_score), ]
Readmissions_by_state$readmission_type = gsub("Rate of readmission for ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub("Rate of readmission after ", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" \\(.*", "",Readmissions_by_state$readmission_type)
Readmissions_by_state$readmission_type = gsub(" Readmission Rate", "",Readmissions_by_state$readmission_type)
Readmission_types = unique(Readmissions_by_state$readmission_type)[-6]
par(mfrow =c(3,3),oma=c(0,0,2,0))
for(i in Readmission_types){
Readmissions_type = merge(Readmissions_by_state[Readmissions_by_state$readmission_type == i,], Readmissions_by_state[Readmissions_by_state$readmission_type == "discharge from hospital",], by.x = "State", by.y = "State")
Readmissions_type = Readmissions_type[order(Readmissions_type$average_score.y, decreasing = T)[1:10],]
print(Readmissions_type$average_score.y)
barplot(t(as.matrix(Readmissions_type[,c("average_score.y")])), names.arg=Readmissions_type$State,col = c("grey80"), border=NA, space=0.25, xlab="State", main = toupper(i),ylab = "Rate of Readmin. (%)", ylim = c(0, 25))
barplot(t(as.matrix(Readmissions_type[,c("average_score.x")])), names.arg=Readmissions_type$State,col = c("#FF0000FF"), border=NA, space=0.25, xlab="State", ylim = c(0, 25), add = T)
}
plot(1, type="n", axes=F, xlab="", ylab="")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey80")
legend("right", legend = c("Rate of Overall readmission"), bty = "n", cex=0.75)
title("The rates of Readmission by Reason for the Top 10 Highest Readmitting States (averaged by hospital)", outer = T)
log(1)
setwd("Documents/Georgetown/Data-Visualization-PPOL-646-Fall-2016/proportions-r-code/")
library(treemap)
library(RColorBrewer) ## loading a package must be done every time you want to use the functions that come with that package
campfin <- read.csv("campfin.csv")
head(campfin)
campfin$Money.Spent.100k <- campfin$Money.Spent/100000
unique(campfin$Organization.Type) ## see all unique organization types
table(campfin$Organization.Type)
## Histogram of spending
hist(campfin$Money.Spent.100k)
## Histogram of spending - removing the outlier
hist(campfin$Money.Spent.100k[which(campfin$Money.Spent.100k < 100)])
## We are going to use a loop to make several graphs (small multiples).
## Single for loop syntax:
for(i in 1:20){print(i)}
## for(iterator in list){code that does something to iterator}
## the iterator, in this case i, goes through the code within the {} as each value in the list. In this case, as 1, then, 2, then 3
## Set up the graphing space to display three grames in one row and three columns:
par(mfrow=c(1,3))
## Three histograms of spending - by organization type
for(i in unique(campfin$Organization.Type)){
hist(campfin$Money.Spent.100k[campfin$Organization.Type == i],
xlab = "Campaign Contributions", main = i)
}
## In this case our iterator goes through the list:
## unique(campfin$Organization.Type)
## So first i is 'Law Firms', then 'Finance', then 'Labor Unions'
## The code below replicates the same effect as the loop:
par(mfrow=c(1,3))
hist(campfin$Money.Spent.100k[campfin$Organization.Type == "Law Firms"],
xlab = "Campaign Contributions", main = "Law Firms")
hist(campfin$Money.Spent.100k[campfin$Organization.Type == "Finance"],
xlab = "Campaign Contributions", main = "Finance")
hist(campfin$Money.Spent.100k[campfin$Organization.Type == "Labor Unions"],xlab = "Campaign Contributions", main = "Labor Unions")
par(mfrow=c(1,1)) ## reset to default
##
treemap(campfin
,index= c("Organization")
,vSize= "Money.Spent.100k")
treemap(campfin
,index= c("Organization.Type","Organization")
,vSize= "Money.Spent.100k")
treemap(campfin
,index= c("Organization.Type","Organization")
,vSize= "Money.Spent.100k"
,type= "value"
,vColor= "Percent.For.Democrats")
## Colors: http://www.r-bloggers.com/r-using-rcolorbrewer-to-colour-your-figures-in-r/
## Works best with color variable scaled around 0
campfin$Percent.For.Democrats_ZeroScale <- campfin$Percent.For.Democrats - 0.5
treemap(campfin
,index= c("Organization.Type","Organization")
,vSize= "Money.Spent.100k"
,type= "value"
,vColor= "Percent.For.Democrats_ZeroScale")
## RColorBrewer - it's great.
## See colors:
display.brewer.all(colorblindFriendly=TRUE)
display.brewer.pal(7,"BrBG")
display.brewer.pal(10,"RdBu")
## Use colors:
brewer.pal(10, "RdBu")
treemap(campfin
,index= c("Organization.Type","Organization")
,vSize= "Money.Spent.100k"
,type= "value"
,vColor= "Percent.For.Democrats_ZeroScale"
,palette= brewer.pal(10,"RdBu")
,range= c(-0.5, 0.5)
,title="Largest Campaign Finance Contributors"
,fontsize.labels=8)
## Create color ramp:
blue_ramp <- colorRampPalette(brewer.pal(9,"Blues"))(100)
library(treemap)
library(RColorBrewer) ## loading a package must be done every time you want to use the functions that come with that package
campfin <- read.csv("campfin.csv")
head(campfin)
campfin$Money.Spent.100k <- campfin$Money.Spent/100000
unique(campfin$Organization.Type) ## see all unique organization types
table(campfin$Organization.Type)
## Histogram of spending
hist(campfin$Money.Spent.100k)
## Histogram of spending - removing the outlier
hist(campfin$Money.Spent.100k[which(campfin$Money.Spent.100k < 100)])
## We are going to use a loop to make several graphs (small multiples).
## Single for loop syntax:
for(i in 1:20){print(i)}
## for(iterator in list){code that does something to iterator}
## the iterator, in this case i, goes through the code within the {} as each value in the list. In this case, as 1, then, 2, then 3
## Set up the graphing space to display three grames in one row and three columns:
par(mfrow=c(1,3))
## Three histograms of spending - by organization type
for(i in unique(campfin$Organization.Type)){
hist(campfin$Money.Spent.100k[campfin$Organization.Type == i],
xlab = "Campaign Contributions", main = i)
}
## In this case our iterator goes through the list:
## unique(campfin$Organization.Type)
## So first i is 'Law Firms', then 'Finance', then 'Labor Unions'
## The code below replicates the same effect as the loop:
par(mfrow=c(1,3))
hist(campfin$Money.Spent.100k[campfin$Organization.Type == "Law Firms"],
xlab = "Campaign Contributions", main = "Law Firms")
hist(campfin$Money.Spent.100k[campfin$Organization.Type == "Finance"],
xlab = "Campaign Contributions", main = "Finance")
hist(campfin$Money.Spent.100k[campfin$Organization.Type == "Labor Unions"],xlab = "Campaign Contributions", main = "Labor Unions")
par(mfrow=c(1,1)) ## reset to default
##
treemap(campfin
,index= c("Organization")
,vSize= "Money.Spent.100k")
treemap(campfin
,index= c("Organization.Type","Organization")
,vSize= "Money.Spent.100k")
display.brewer.all(colorblindFriendly=TRUE)
library(treemap)
library(RColorBrewer) ## loading a package must be done every time you want to use the functions that come with that package
campfin <- read.csv("campfin.csv")
head(campfin)
campfin$Money.Spent.100k <- campfin$Money.Spent/100000
unique(campfin$Organization.Type) ## see all unique organization types
table(campfin$Organization.Type)
## Histogram of spending
hist(campfin$Money.Spent.100k)
## Histogram of spending - removing the outlier
hist(campfin$Money.Spent.100k[which(campfin$Money.Spent.100k < 100)])
## We are going to use a loop to make several graphs (small multiples).
## Single for loop syntax:
for(i in 1:20){print(i)}
## for(iterator in list){code that does something to iterator}
## the iterator, in this case i, goes through the code within the {} as each value in the list. In this case, as 1, then, 2, then 3
## Set up the graphing space to display three grames in one row and three columns:
par(mfrow=c(1,3))
## Three histograms of spending - by organization type
for(i in unique(campfin$Organization.Type)){
hist(campfin$Money.Spent.100k[campfin$Organization.Type == i],
xlab = "Campaign Contributions", main = i)
}
## In this case our iterator goes through the list:
## unique(campfin$Organization.Type)
## So first i is 'Law Firms', then 'Finance', then 'Labor Unions'
## The code below replicates the same effect as the loop:
par(mfrow=c(1,3))
hist(campfin$Money.Spent.100k[campfin$Organization.Type == "Law Firms"],
xlab = "Campaign Contributions", main = "Law Firms")
hist(campfin$Money.Spent.100k[campfin$Organization.Type == "Finance"],
xlab = "Campaign Contributions", main = "Finance")
hist(campfin$Money.Spent.100k[campfin$Organization.Type == "Labor Unions"],xlab = "Campaign Contributions", main = "Labor Unions")
par(mfrow=c(1,1)) ## reset to default
##
treemap(campfin
,index= c("Organization")
,vSize= "Money.Spent.100k")
treemap(campfin
,index= c("Organization.Type","Organization")
,vSize= "Money.Spent.100k")
treemap(campfin
,index= c("Organization.Type","Organization")
,vSize= "Money.Spent.100k"
,type= "value"
,vColor= "Percent.For.Democrats")
## Colors: http://www.r-bloggers.com/r-using-rcolorbrewer-to-colour-your-figures-in-r/
## Works best with color variable scaled around 0
campfin$Percent.For.Democrats_ZeroScale <- campfin$Percent.For.Democrats - 0.5
treemap(campfin
,index= c("Organization.Type","Organization")
,vSize= "Money.Spent.100k"
,type= "value"
,vColor= "Percent.For.Democrats_ZeroScale")
## RColorBrewer - it's great.
## See colors:
display.brewer.all(colorblindFriendly=TRUE)
display.brewer.pal(7,"BrBG")
display.brewer.pal(10,"RdBu")
## Use colors:
brewer.pal(10, "RdBu")
treemap(campfin
,index= c("Organization.Type","Organization")
,vSize= "Money.Spent.100k"
,type= "value"
,vColor= "Percent.For.Democrats_ZeroScale"
,palette= brewer.pal(10,"RdBu")
,range= c(-0.5, 0.5)
,title="Largest Campaign Finance Contributors"
,fontsize.labels=8)
## Create color ramp:
blue_ramp <- colorRampPalette(brewer.pal(9,"Blues"))(100)
